name: Push Image to ECR and Scan

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      imageTag:
        required: true
        type: string
      commonImageName:
        required: false
        type: string
        description: 'common image name'
        default: 'libs'

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout


jobs:
  push-to-ecr-and-scan:
    environment: 'new_dev'
    name: Push + Scan
    runs-on: ubuntu-latest
    env:
      REPOSITORY: insight/${{ inputs.repository }}

    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Download and load libs image
      #   uses: ./.github/actions/common-images-load
      #   with:
      #     image: ${{ inputs.commonImageName }}

  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACC_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login To Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Check ECR Repository
        id: check-ecr-repo
        run: |
          if 
            aws ecr describe-repositories --repository-names $REPOSITORY 
          then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
        
      - name: Create ECR Repository
        if: steps.check-ecr-repo.outputs.exists == 'false'
        run: |
          aws ecr create-repository --repository-name $REPOSITORY
      
      - name: Build & Push Docker Image
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ECR_IMAGE=$ECR_REGISTRY/$REPOSITORY
          cd ./
          docker build -f Dockerfile -t $ECR_IMAGE ../../
          docker push $ECR_IMAGE
          docker tag $ECR_IMAGE $ECR_IMAGE:${{ inputs.imageTag }}
          docker push $ECR_IMAGE:${{ inputs.imageTag }}

        