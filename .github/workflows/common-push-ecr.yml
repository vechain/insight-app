name: Push Image to ECR and Scan

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      imageTag:
        required: true
        type: string
      commonImageName:
        required: false
        type: string
        description: 'Common image name'
        default: 'libs'

permissions:
  id-token: write
  contents: read

jobs:
  push-to-ecr-and-scan:
    environment: 'new_dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download and load libs image
        uses: ./.github/actions/common-images-load
        with:
          image: ${{ inputs.commonImageName }}
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACC_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Check ECR Repository
        id: check-ecr-repo
        run: |
          if aws ecr describe-repositories --repository-names $REPOSITORY; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
        
      - name: Create ECR Repository
        if: steps.check-ecr-repo.outputs.exists == 'false'
        run: |
          aws ecr create-repository --repository-name $REPOSITORY
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ECR_IMAGE=$ECR_REGISTRY/$REPOSITORY
          docker build -f Dockerfile -t $ECR_IMAGE ../../
          docker push $ECR_IMAGE
          docker tag $ECR_IMAGE $ECR_IMAGE:${{ inputs.imageTag }}
          docker push $ECR_IMAGE:${{ inputs.imageTag }}
